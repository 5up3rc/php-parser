Test class parser
--PASS--
interface a1 extends i1, i2 {
  const A1 = 123;
  public function a1();
  protected function a1();
}
--FAIL--
class a1 {
  echo 123;
}
--FAIL--
interface a1 extends i1, i2 {
  private const A1 = 123;
}
--FAIL--
interface a1 extends i1, i2 {
  private function A();
}
--FAIL--
interface a1 {
  public function A() {
    // non-sense
  }
}
--PASS--
class a1 {
  public function b1() {
    // nothing
  }
}
--PASS @todo handle interfaces --
// test
class titi {
  const FOO = 123;
  static protected $var;
}
class toto extends titi implements tata {}
--PASS--
abstract class aa { }
--PASS--
final class aa { }
--PASS--
class titi { }
class /** aa **/ toto
  extends titi
  implements tata, coincoin {
  /**
   * Hi
   */
}
--FAIL--
class { }
--FAIL--
class zz;
--FAIL--
abstract final class zz { }
--FAIL--
class a extends implements { }
--FAIL--
class extends { }
--FAIL--
class implements { }
--FAIL--
class a implements { }
--FAIL--
class a {
  const B;
}
--PASS--
final class aa {
  const AAAA = 1;
  const MY_CONST = 'azerty';
  /**
   * azerty
   */
  const ZZZ = 3, YYY = 4;
}
--PASS--
abstract class aa {
  public $a;
  private $b;
  protected $d;

  public $a = 'foo';
  /**
   * azerty
   */
  static public $e, $z = 777;

  public static $f;
  var $g;
  var $h , $i;
}
--PASS--
class foo {
  public function aa() {
    /** code here **/
  }
  public static function bb($arg1, $arg2 = 123) {
    /** code here **/
  }
  /**
   * @return void
   */
  final static protected function bb() {
    /** code here **/
  }
  function aa($b) {
  }
}
--PASS--
class foo {
  static public $a = 123;
  protected static  $b, $c;
  private static  $d = array();
  // aaa
}